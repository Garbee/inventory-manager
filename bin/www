#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config();
const app = require('../app');
const debug = require('debug')('inventory-manager:server');
const http = require('http');
const getPort = require('get-port');

let server;
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  const isPortNamedPipe = isNaN(port);
  if (isPortNamedPipe) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
  debug(`http://localhost:${addr.port}`);
}

(async function() {
  const port = normalizePort(process.env.PORT || await getPort());
  /**
   * Event listener for HTTP server "error" event.
   */
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  app.set('port', port);

  server = http.createServer(app)

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}());
